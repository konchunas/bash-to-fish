#!/usr/bin/env node
/* globals cat, exit, exec, ShellString */

'use strict';

var ohm = require('../lib/ohm/dist/ohm');
var fs = require('fs');
var path = require('path');
var semantics = require('../src/semantics');
require('shelljs/global');
var myPackage = require('../package.json');

var argv = require('minimist')(process.argv.slice(2));

function usage(error) {
  var func = error ? console.error.bind(console) : console.log.bind(console);
  func('Usage: ' + path.basename(__filename) + ' [opts] <shell script input> [javascript file]');
}

if (argv.version || argv.v) {
  console.log(myPackage.version);
  process.exit(0);
} else if (argv.help || argv.h) {
  usage();
  process.exit(0);
}

var contents = fs.readFileSync(path.join(__dirname, '..', 'src', 'bash.ohm'));
var bash = ohm.grammar(contents);

// Load in script, ensure a trailing newline
var inputFile = argv._[0];
if (!inputFile) {
  usage();
  process.exit(1);
}
var script = cat(inputFile).trim() + '\n';

// Load in plugins
if (argv.plugins) {
  argv.plugins.split(/ +/).forEach(function (plug) {
    // Enable each plugin specified
    semantics.plugins.enable(plug);
  });
}

var m = bash.match(script);
if (m.failed()) {
  console.error('Unable to parse script');
  console.error(m.message);
  try {
    console.error(m.message); // This line sometimes throws an exception
    console.error('Please include this output in the bug report');
  } catch (e) {
    console.error('Unable to identify parsing failure (please include your full script in the bug report)');
  }
  console.error('Please file a bug report at ' + myPackage.repository.url);
  exit(1);
}

var s = bash.createSemantics();
s.addOperation(
  'toJS(indent, ctx)',
  semantics.source2sourceSemantics);

var n = s(m);

var jsResult = n.toJS(0, {});
if (argv._[1]) { // write it out to a file
  ShellString(jsResult).to(argv._[1]);
} else { // write it to stdout
  process.stdout.write(jsResult);
}
